name: Build-x86

on:
#  repository_dispatch:
   workflow_dispatch:
     inputs:
       ssh:
         description: 'SSH connection to Actions'
         required: false
         default: 'false'
   schedule:
     - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: configs/feeds.conf.default
  CONFIG_FILE: configs/x86.config
  DIY_P1_SH: configs/diy-part1.sh
  DIY_P2_SH: configs/diy-x86.sh
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: OpenWrt-x86

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/ysx88/OpenWrt/main/depends-ubuntu-2204)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

#    - name: SSH connection to Actions
#      uses: P3TERX/ssh2actions@v1.0.0
#      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
#      env:
#        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
#        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j16
        find dl -size "-1024c" -exec ls -l {} \;
        find dl -size "-1024c" -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "{status}={success}" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y-%m-%d %H%M")" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Prepare artifact
      run: |
        cd ./openwrt/bin
        mkdir -p ./firmware
        mkdir -p ./package
        rm -rf $(find ../bin/targets/ -name "packages" -o -name "*.buildinfo" -o -name "sha256sums" -o -name "*.manifest")
        cp -rf $(find ../bin/targets/ -type f) ./firmware/
        cp -rf $(find ../bin/packages/ -type f -name "*.ipk") ./package/
        cd ./package
        tar -zcvf IPK.tar.gz *
        mv -f IPK.tar.gz ../targets/*/*

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf IPK.tar.gz
        rm -rf openwrt-x86-64-generic-kernel.bin
        rm -rf profiles.json
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: Upload OpenWrt Firmware to Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.FILE_NAME }} ❤️ ${{ env.DATE }}
        tag: ${{ env.FILE_NAME }}
        artifacts: ${{ env.FIRMWARE }}/*
        allowUpdates: true
        removeArtifacts: true
        token: ${{ secrets.GH_TOKEN }}
        body: |
          * 后台地址：192.168.88.2
          默认密码：password
